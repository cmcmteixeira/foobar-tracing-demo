{
  http: {
    port: 9000
  }
  console: {
    uri: "http://localhost:9999"
    uri: ${?CONSOLE_HOST}
  }


  amqp: {
    host: "localhost"
    host: ${?RABBIT_HOST}
    port: 5672
    port: ${?RABBIT_PORT}
    username: "guest"
    username: ${?RABBIT_USERNAME}
    password: "guest"
    password: ${?RABBIT_PASSWORD}

    taps: {
      exchange: "com.example.tap"
      exchange: ${?RABBIT_EXCHANGES}

      routingKeys: "water,water;soda,soda;coke,coke"
      routingKeys: ${?RABBIT_RK}
    }

    bartender {
      queue: "bartender"
      queue: ${?BARTENDER_QUEUE_NAME}
      exchange: "com.example.bartender"
      exchange: ${?BARTENDER_EXCHANGE}
      rk: "drink.poured"
      rk: ${?BARTENDER_RK}
    }
  }
  kamon {
    environment {
      service = "bartender"
      service = ${?SERVICE_NAME}
      host = "auto"
      instance = "auto"
      tags {
        ip = "127.0.0.1"
      }
    }

    influxdb {
      hostname = "127.0.0.1"
      hostname = ${?INFLUX_DB_HOST}
      port = 8086
      port = ${?INFLUX_DB_PORT}
      database = "pub"
      database = ${?INFLUX_DB_NAME}
      percentiles = [50.0, 70.0, 90.0, 95.0, 99.0, 99.9]
      protocol = "http"
      authentication {
        user = "user"
        user = ${?INFLUX_DB_USERNAME}
        password = "password"
        password = ${?INFLUX_DB_PASSWORD}
      }
      additional-tags {
        service = yes
        host = yes
        instance = yes
        blacklisted-tags = []
      }
    }

    reporters = ["kamon.jaeger.JaegerReporter","kamon.zipkin.ZipkinReporter"]
    scheduler-pool-size = 2
    metric {
      tick-interval = 30 seconds
      optimistic-tick-alignment = yes
      refresh-scheduler-pool-size = 2
      instrument-factory {
        default-settings {
          histogram {
            lowest-discernible-value = 1
            highest-trackable-value = 3600000000000
            significant-value-digits = 2
          }
          range-sampler {
            lowest-discernible-value = 1
            highest-trackable-value = 3600000000000
            significant-value-digits = 2
            sample-interval = 200 ms
          }
        }
      }
    }
    trace {
      tick-interval = 10 seconds
      tick-interval = ${?TRACE_TICK_INTERVAL}
      reporter-queue-size = 4096
      join-remote-parents-with-same-span-id = no
      sampler = "random"
      random-sampler {
        probability = 1
        probability = ${?TRACE_SAMPLING_PROBABILITY}
      }
      identity-provider = "kamon.trace.IdentityProvider$Default"
      span-metrics {
        scope-spans-to-parent = yes
      }
    }
    logback {
      mdc-context-propagation = on
      mdc-trace-id-key = kamonTraceId
      mdc-span-id-key = kamonSpanID
    }
    jdbc {
      slow-query-threshold = 2 seconds
    }
    executors {
      sample-interval = 500 milliseconds
    }
    http4s {
      name-generator = "com.example.tracing.operation.UUIDNameGenerator"
      add-http-status-code-as-metric-tag = true
    }
    jaeger {
      host = "localhost"
      host = ${?JAEGER_HOST}
      port = 14268
      port = ${?JAEGER_PORT}
      tls = false
    }
    kamon {
      zipkin {
        host = "localhost"
        port = 9411
      }
    }
  }
}